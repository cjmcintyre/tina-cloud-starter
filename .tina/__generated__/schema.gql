# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getDocsDocument(relativePath: String): DocsDocument!
  getDocsList(before: String, after: String, first: Int, last: Int): DocsConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getServicesDocument(relativePath: String): ServicesDocument!
  getServicesList(before: String, after: String, first: Int, last: Int): ServicesConnection!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Int, last: Int): GlobalConnection!
  getAuthorsDocument(relativePath: String): AuthorsDocument!
  getAuthorsList(before: String, after: String, first: Int, last: Int): AuthorsConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = DocsDocument | PostsDocument | ServicesDocument | GlobalDocument | AuthorsDocument | PagesDocument

type Docs {
  title: String
  slug: String
  body: JSON
}

type DocsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Docs!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type DocsConnectionEdges {
  cursor: String
  node: DocsDocument
}

type DocsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocsConnectionEdges]
}

union PostsAuthorDocument = AuthorsDocument

type Posts {
  title: String
  author: PostsAuthorDocument
  date: String
  heroImg: String
  excerpt: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

union ServicesAuthorDocument = AuthorsDocument

type Services {
  order: Int
  excerptImg: String
  excerpt: String
  title: String
  author: ServicesAuthorDocument
  date: String
  heroImg: String
  body: String
}

type ServicesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Services!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ServicesConnectionEdges {
  cursor: String
  node: ServicesDocument
}

type ServicesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [ServicesConnectionEdges]
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNavSubpages {
  href: String
  label: String
  description: String
}

type GlobalHeaderNav {
  href: String
  label: String
  subpages: [GlobalHeaderNavSubpages]
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
}

type GlobalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [GlobalConnectionEdges]
}

type Authors {
  name: String
  avatar: String
}

type AuthorsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Authors!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorsConnectionEdges {
  cursor: String
  node: AuthorsDocument
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AuthorsConnectionEdges]
}

type PagesBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PagesBlocksHeroImage {
  src: String
  alt: String
}

type PagesBlocksHero {
  tagline: String
  headline: String
  text: String
  actions: [PagesBlocksHeroActions]
  image: PagesBlocksHeroImage
  color: String
}

type PagesBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PagesBlocksFeaturesItems {
  icon: PagesBlocksFeaturesItemsIcon
  title: String
  text: String
}

type PagesBlocksFeatures {
  items: [PagesBlocksFeaturesItems]
  color: String
}

type PagesBlocksContent {
  body: String
  color: String
}

type PagesBlocksTestimonial {
  quote: String
  author: String
  color: String
}

type PagesBlocksImagesItemsImage {
  src: String
  alt: String
}

type PagesBlocksImagesItems {
  imageTitle: String
  image: PagesBlocksImagesItemsImage
  text: String
}

type PagesBlocksImages {
  items: [PagesBlocksImagesItems]
  color: String
}

type PagesBlocksContactImage {
  src: String
  alt: String
}

type PagesBlocksContact {
  headline: String
  body: String
  color: String
  image: PagesBlocksContactImage
}

type PagesBlocksPricingsPricing {
  title: String
  price: Int
  features: [String]
  highlighted: Boolean
}

type PagesBlocksPricings {
  pricing: [PagesBlocksPricingsPricing]
}

union PagesBlocks = PagesBlocksHero | PagesBlocksFeatures | PagesBlocksContent | PagesBlocksTestimonial | PagesBlocksImages | PagesBlocksContact | PagesBlocksPricings

type Pages {
  blocks: [PagesBlocks]
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateDocsDocument(relativePath: String!, params: DocsMutation!): DocsDocument!
  createDocsDocument(relativePath: String!, params: DocsMutation!): DocsDocument!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  createPostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateServicesDocument(relativePath: String!, params: ServicesMutation!): ServicesDocument!
  createServicesDocument(relativePath: String!, params: ServicesMutation!): ServicesDocument!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  createGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  updateAuthorsDocument(relativePath: String!, params: AuthorsMutation!): AuthorsDocument!
  createAuthorsDocument(relativePath: String!, params: AuthorsMutation!): AuthorsDocument!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
  createPagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  docs: DocsMutation
  posts: PostsMutation
  services: ServicesMutation
  global: GlobalMutation
  authors: AuthorsMutation
  pages: PagesMutation
}

input DocsMutation {
  title: String
  slug: String
  body: JSON
}

input PostsMutation {
  title: String
  author: String
  date: String
  heroImg: String
  excerpt: String
  body: String
}

input ServicesMutation {
  order: Int
  excerptImg: String
  excerpt: String
  title: String
  author: String
  date: String
  heroImg: String
  body: String
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavSubpagesMutation {
  href: String
  label: String
  description: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
  subpages: [GlobalHeaderNavSubpagesMutation]
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorsMutation {
  name: String
  avatar: String
}

input PagesBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PagesBlocksHeroImageMutation {
  src: String
  alt: String
}

input PagesBlocksHeroMutation {
  tagline: String
  headline: String
  text: String
  actions: [PagesBlocksHeroActionsMutation]
  image: PagesBlocksHeroImageMutation
  color: String
}

input PagesBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PagesBlocksFeaturesItemsMutation {
  icon: PagesBlocksFeaturesItemsIconMutation
  title: String
  text: String
}

input PagesBlocksFeaturesMutation {
  items: [PagesBlocksFeaturesItemsMutation]
  color: String
}

input PagesBlocksContentMutation {
  body: String
  color: String
}

input PagesBlocksTestimonialMutation {
  quote: String
  author: String
  color: String
}

input PagesBlocksImagesItemsImageMutation {
  src: String
  alt: String
}

input PagesBlocksImagesItemsMutation {
  imageTitle: String
  image: PagesBlocksImagesItemsImageMutation
  text: String
}

input PagesBlocksImagesMutation {
  items: [PagesBlocksImagesItemsMutation]
  color: String
}

input PagesBlocksContactImageMutation {
  src: String
  alt: String
}

input PagesBlocksContactMutation {
  headline: String
  body: String
  color: String
  image: PagesBlocksContactImageMutation
}

input PagesBlocksPricingsPricingMutation {
  title: String
  price: Int
  features: [String]
  highlighted: Boolean
}

input PagesBlocksPricingsMutation {
  pricing: [PagesBlocksPricingsPricingMutation]
}

input PagesBlocksMutation {
  hero: PagesBlocksHeroMutation
  features: PagesBlocksFeaturesMutation
  content: PagesBlocksContentMutation
  testimonial: PagesBlocksTestimonialMutation
  images: PagesBlocksImagesMutation
  contact: PagesBlocksContactMutation
  pricings: PagesBlocksPricingsMutation
}

input PagesMutation {
  blocks: [PagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  